<<<<<<< HEAD
# Generated by Django 5.1.4 on 2025-01-08 12:10
=======
# Generated by Django 5.1.4 on 2025-01-07 06:17
>>>>>>> 055d1085c6b5dfa903d06d859fb9d79675cd844a

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import multiselectfield.db.fields
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country_name', models.CharField(max_length=32, unique=True)),
                ('country_name_en', models.CharField(max_length=32, null=True, unique=True)),
                ('country_name_ru', models.CharField(max_length=32, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('age', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(18), django.core.validators.MaxValueValidator(80)])),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('user_role', models.CharField(choices=[('owner', 'owner'), ('customer', 'customer')], default='customer', max_length=32)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('booking_price', models.PositiveIntegerField()),
                ('check_in', models.DateField()),
                ('check_out', models.DateField()),
                ('status_book', models.CharField(choices=[('отменено', 'отменено'), ('подтверждено', 'подтверждено')], max_length=16)),
<<<<<<< HEAD
                ('booking_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='booking_user', to=settings.AUTH_USER_MODEL)),
=======
                ('book_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='book', to=settings.AUTH_USER_MODEL)),
>>>>>>> 055d1085c6b5dfa903d06d859fb9d79675cd844a
            ],
        ),
        migrations.CreateModel(
            name='Hotel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hotel_name', models.CharField(max_length=60)),
                ('hotel_name_en', models.CharField(max_length=60, null=True)),
                ('hotel_name_ru', models.CharField(max_length=60, null=True)),
                ('description', models.TextField()),
                ('description_en', models.TextField(null=True)),
                ('description_ru', models.TextField(null=True)),
                ('hotel_video', models.FileField(blank=True, null=True, upload_to='hotel_videos/')),
                ('hotel_image', models.ImageField(upload_to='hotel_image/')),
                ('hotel_stars', models.PositiveIntegerField(blank=True, null=True)),
                ('city', models.CharField(max_length=140)),
                ('city_en', models.CharField(max_length=140, null=True)),
                ('city_ru', models.CharField(max_length=140, null=True)),
                ('address', models.CharField(max_length=140)),
                ('address_en', models.CharField(max_length=140, null=True)),
                ('address_ru', models.CharField(max_length=140, null=True)),
<<<<<<< HEAD
                ('country', models.ManyToManyField(related_name='country', to='booking.country')),
=======
                ('country', models.ManyToManyField(related_name='myhotel', to='booking.country')),
>>>>>>> 055d1085c6b5dfa903d06d859fb9d79675cd844a
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hotel_owner', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='History',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
<<<<<<< HEAD
                ('booking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='date_history', to='booking.booking')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_history', to=settings.AUTH_USER_MODEL)),
                ('myhotel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hotel_history', to='booking.myhotel')),
=======
                ('history_date', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='date_history', to='booking.booking')),
                ('history_price', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='price_history', to='booking.booking')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_history', to=settings.AUTH_USER_MODEL)),
                ('myhotel', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='hotel_history', to='booking.myhotel')),
>>>>>>> 055d1085c6b5dfa903d06d859fb9d79675cd844a
            ],
        ),
        migrations.CreateModel(
            name='FavoriteHotel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
<<<<<<< HEAD
                ('selected', models.BooleanField(default=True)),
                ('favorite', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users_favorite', to=settings.AUTH_USER_MODEL)),
=======
                ('selected', models.BooleanField()),
                ('favorite', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorite_hotels', to='booking.country')),
>>>>>>> 055d1085c6b5dfa903d06d859fb9d79675cd844a
                ('myhotel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorite_hotel', to='booking.myhotel')),
            ],
        ),
        migrations.AddField(
            model_name='booking',
<<<<<<< HEAD
            name='booking_hotel',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='booking_hotel', to='booking.myhotel'),
=======
            name='book_hotel',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='book_hotel', to='booking.myhotel'),
>>>>>>> 055d1085c6b5dfa903d06d859fb9d79675cd844a
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_number', models.PositiveIntegerField()),
                ('room_type', multiselectfield.db.fields.MultiSelectField(choices=[('люкс', 'люкс'), ('семейный', 'семейный'), ('одноместный', 'одноместный'), ('двухместный', 'двухместный')], max_length=140)),
                ('status_choices', models.CharField(choices=[('свободен', 'свободен'), ('забронирован', 'забронирован'), ('занят', 'занят')], max_length=100)),
                ('room_description', models.TextField()),
                ('room_description_en', models.TextField(null=True)),
                ('room_description_ru', models.TextField(null=True)),
                ('room_price', models.PositiveIntegerField(default=0)),
                ('hotels_room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='room_numbers', to='booking.myhotel')),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('date', models.DateField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='profile_review', to=settings.AUTH_USER_MODEL)),
                ('com_room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='com_room_review', to='booking.room')),
            ],
        ),
        migrations.AddField(
            model_name='booking',
<<<<<<< HEAD
            name='booking_room',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='booking_room', to='booking.room'),
=======
            name='book_room',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='book_room', to='booking.room'),
>>>>>>> 055d1085c6b5dfa903d06d859fb9d79675cd844a
        ),
        migrations.CreateModel(
            name='RoomImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_image', models.ImageField(upload_to='images_rooms/')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='booking.room')),
            ],
        ),
<<<<<<< HEAD
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book_country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='book_country', to='booking.country')),
                ('book_hotels', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='books_hotels', to='booking.myhotel')),
                ('book_room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='book_room', to='booking.room')),
                ('book_image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='books_image', to='booking.roomimage')),
            ],
        ),
=======
>>>>>>> 055d1085c6b5dfa903d06d859fb9d79675cd844a
    ]
